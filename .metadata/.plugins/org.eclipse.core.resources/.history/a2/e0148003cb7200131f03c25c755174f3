package com.lyong.opengl.renderer;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLU;

import com.lyong.opengl.util.BufferUtil;

/**
 * 棱锥渲染
 * @author luoyong
 *
 */
public class MyTriangleConeRenderer extends AbstractRenderer {

    @Override
    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
        super.onSurfaceCreated(gl, config);
        //启用颜色缓冲区
        gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
    }
    
    @Override
    public void onDrawFrame(GL10 gl) {

        //清除颜色缓冲区
        gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
        //设置绘图颜色
        gl.glColor4f(1f, 0f, 0f, 1f);
        
        //启用深度测试
        gl.glEnable(GL10.GL_DEPTH_TEST);
        
        //GL10.GL_SMOOTH  平滑着色（默认）
        //GL10.GL_FLAT 单调着色
        gl.glShadeModel(GL10.GL_FLAT);
        
        //设置模型视图矩阵
        gl.glMatrixMode(GL10.GL_MODELVIEW);
        //加载单位矩阵
        gl.glLoadIdentity();
        
        //设置眼球的参数
        GLU.gluLookAt(gl, 0f, 0f, 5f, 0f, 0f, 0f, 0f, 1f, 0f);
        
        //旋转角度
        gl.glRotatef(-120f, 1f, 0f, 0f);
        //gl.glRotatef(yrotate, 0f, 1f, 0f);
        
        //计算点的坐标
        float r = 0.5f; //半径
        float x = 0f, y = 0f, z = -0.5f;
        /*****************锥面********************/
        //顶点集合坐标
        List<Float> coordsList = new ArrayList<Float>();
        //添加锥顶点坐标
        coordsList.add(0f);
        coordsList.add(0f);
        coordsList.add(0.5f);
        
        List<Float> colorList = new ArrayList<Float>();
        colorList.add(1f); //r
        colorList.add(0f); //g
        colorList.add(0f); //b
        colorList.add(1f); //a
        
        /**************锥底集合******************/
        List<Float> coordsBottomList = new ArrayList<Float>();
        //添加锥底点坐标
        coordsBottomList.add(0f);
        coordsBottomList.add(0f);
        coordsBottomList.add(-0.5f);
        
        boolean flag = false;
        
        //底面
        for(float alpha = 0f; alpha < Math.PI * 6; alpha = (float)(alpha + Math.PI / 8)){
            x = (float) (r * Math.cos(alpha));
            y = (float) (r * Math.sin(alpha));
            
            coordsList.add(x);
            coordsList.add(y);
            coordsList.add(z);
            
            //添加锥底坐标
            coordsBottomList.add(x);
            coordsBottomList.add(y);
            coordsBottomList.add(z);
            
            if(flag = !flag){
                //黄色
                colorList.add(1f); //r
                colorList.add(1f); //g
                colorList.add(0f); //b
                colorList.add(1f); //a
            }else{
                colorList.add(1f); //r
                colorList.add(0f); //g
                colorList.add(0f); //b
                colorList.add(1f); //a
            }
        }
    
        if(flag = !flag){
            //黄色
            colorList.add(1f); //r
            colorList.add(1f); //g
            colorList.add(0f); //b
            colorList.add(1f); //a
        }else{
            colorList.add(1f); //r
            colorList.add(0f); //g
            colorList.add(0f); //b
            colorList.add(1f); //a
        }
        
        ByteBuffer colorBufffer = BufferUtil.list2ByteBuffer(colorList);
        //颜色缓冲区
        gl.glColorPointer(4, GL10.GL_FLOAT, 0, colorBufffer);
        //指定顶点指针
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, BufferUtil.list2ByteBuffer(coordsList));
        gl.glDrawArrays(GL10.GL_TRIANGLE_FAN, 0, coordsList.size() / 3);
    
        //绘制锥底
        colorBufffer.position(4);
        gl.glColorPointer(4, GL10.GL_FLOAT, 0, colorBufffer);
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, BufferUtil.list2ByteBuffer(coordsBottomList));
        gl.glDrawArrays(GL10.GL_TRIANGLE_FAN, 0, coordsBottomList.size() / 3);
    }
}
