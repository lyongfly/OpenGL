package com.lyong.opengl.renderer;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.List;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLSurfaceView.Renderer;
import android.opengl.GLU;

/**
 * 线代渲染器，连接 不闭合
 * @author luoyong
 *
 */
public class MyLineStripRenderer implements Renderer {

    /**
     * 3
     */
    @Override
    public void onDrawFrame(GL10 gl) {

        //清除颜色缓冲区
        gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
        //设置绘图颜色
        gl.glColor4f(1f, 0f, 0f, 1f);
        //设置模型视图矩阵
        gl.glMatrixMode(GL10.GL_MODELVIEW);
        //加载单位矩阵
        gl.glLoadIdentity();
        
        //设置眼球的参数
        GLU.gluLookAt(gl, 0f, 0f, 5f, 0f, 0f, 0f, 0f, 1f, 0f);
        
        //旋转角度
        gl.glRotatef(-90f, 1f, 0f, 0f);
        //gl.glRotatef(yrotate, 0f, 1f, 0f);
        
        //计算点的坐标
        float r = 0.5f; //半径
        List<Float> coordsList = new ArrayList<Float>();
        float x = 0f, y = 0f, z = 1f;
        float zStep = 0.01f;
        for(float alpha = 0f; alpha < Math.PI * 6; alpha = (float)(alpha + Math.PI / 16)){
            x = (float) (r * Math.cos(alpha));
            y = (float) (r * Math.sin(alpha));
            z = z - zStep;
            
            coordsList.add(x);
            coordsList.add(y);
            coordsList.add(z);
        }
        
        //转换点为缓冲区
        ByteBuffer ibb = ByteBuffer.allocateDirect(coordsList.size() * 4);
        ibb.order(ByteOrder.nativeOrder());
        FloatBuffer fbb = ibb.asFloatBuffer();
        for(float f : coordsList){
            fbb.put(f);
        }
        //指定顶点指针
        ibb.position(0);
        
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, ibb);
        
        gl.glDrawArrays(GL10.GL_POINTS, 0, coordsList.size() / 3);
        
    }

    /**
     * 2
     */
    @Override
    public void onSurfaceChanged(GL10 gl, int width, int height) {
        //设置视口
        gl.glViewport(0, 0, width, height);
        ratio = (float)width /(float) height;
        //投影矩阵
        gl.glMatrixMode(GL10.GL_PROJECTION);
        //加载单位矩阵
        gl.glLoadIdentity();
        //设置平截头体
        gl.glFrustumf(-ratio, ratio, -1f, 1f, 3f, 7f);
        
    }

    /**
     * 1
     */
    @Override
    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
        //设置清屏色
        gl.glClearColor(0f, 0f, 0f, 1f);
        //启用顶点缓冲区数组
        gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
        
    }

}
