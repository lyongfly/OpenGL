package com.suryani.activity.cart;

import java.util.Calendar;

import android.app.DatePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.InputType;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.TextView;

import com.quidsi.activity.CartButtonEnabledActivity;
import com.quidsi.activity.NavigationActivity;
import com.suryani.R;
import com.suryani.model.CreditCard;
import com.suryani.model.CustomerAddress;
import com.suryani.util.DialogUtil;
import com.suryani.widget.CustomerDatePickerDialog;

public class CreateCardActivity extends NavigationActivity {

    public final static int BILLING_ADDRESS = 3;

    private EditText monthEdit;
    private EditText yearEdit;
    protected CustomerDatePickerDialog dateDialog;
    private EditText cardNumberEdit;
    private EditText cardPasswordEdit;
    private boolean isToEdit;
    private CreditCard creditCard;
    private boolean isFromCart;
    private TextView titleName;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getLayoutInflater().inflate(R.layout.new_card, mMainLayout);
        
        cardNumberEdit = (EditText) findViewById(R.id.cardNumber);
        cardPasswordEdit = (EditText) findViewById(R.id.cardPassword);
        titleName = (TextView) findViewById(R.id.textView1);

        monthEdit = (EditText) findViewById(R.id.month_edit);
        monthEdit.setInputType(InputType.TYPE_NULL);
        monthEdit.setFocusable(false);
        yearEdit = (EditText) findViewById(R.id.year_edit);
        yearEdit.setInputType(InputType.TYPE_NULL);
        yearEdit.setFocusable(false);

        monthEdit.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {

                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(monthEdit.getWindowToken(), 0);

                showDateDialog();

            }
        });

        yearEdit.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {

                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(yearEdit.getWindowToken(), 0);

                showDateDialog();

            }
        });

        isToEdit = getIntent().getBooleanExtra("isToEdit", false);
        isFromCart = getIntent().getBooleanExtra("isFromCartPage", false);
        if (isToEdit) {
            creditCard = (CreditCard) getIntent().getSerializableExtra("card");
            titleName.setText("Card Info");
            cardNumberEdit.setText(creditCard.CardNumber);
            cardNumberEdit.setEnabled(false);
            cardPasswordEdit.setText(creditCard.CardTypeName);
            cardPasswordEdit.setEnabled(false);
            // Log.i("step", "ExpireDate: "+creditCard.ExpireDate);
            String[] dates = creditCard.ExpireDate.split("/");
            monthEdit.setText(dates[0]);
            yearEdit.setText(dates[1]);

        }

        Button addBillingButton = (Button) findViewById(R.id.addBillingButton);
        addBillingButton.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                CreditCard card = new CreditCard();
                CustomerAddress billingAddress = new CustomerAddress();
                int cardNumberLength = cardNumberEdit.getText().toString().trim().length();
                if (cardNumberLength != 15 && cardNumberLength != 16) {
                    DialogUtil.ToastShow(CreateCardActivity.this, R.string.integralcardnumber);
                    return;
                }
                ;
                int codeLength = cardPasswordEdit.getText().toString().trim().length();
                if (codeLength != 3 && codeLength != 4) {
                    DialogUtil.ToastShow(CreateCardActivity.this, R.string.integralsecuritycode);
                    return;
                }

                String monthText = monthEdit.getText().toString();
                String yearText = yearEdit.getText().toString();
                if (monthText.equalsIgnoreCase("mm") || monthText.equals("")
                        || yearText.equalsIgnoreCase("year") || yearText.equals("")) {
                    DialogUtil.ToastShow(CreateCardActivity.this, R.string.uexpireddate);
                    return;
                }

                long time = System.currentTimeMillis();
                Calendar mCalendar = Calendar.getInstance();
                mCalendar.setTimeInMillis(time);
                int nMonth = mCalendar.get(Calendar.MONTH) + 1;
                int nYear = mCalendar.get(Calendar.YEAR);
                int month = Integer.parseInt(monthEdit.getText().toString());
                int year = Integer.parseInt(yearEdit.getText().toString());
                if (year < nYear || (year == nYear && month < nMonth)) {
                    DialogUtil.ToastShow(CreateCardActivity.this, R.string.cardexpired);
                    return;
                }

                if (isToEdit) {

                    card = creditCard;
                    card.ExpireDate = monthEdit.getText().toString() + "%2F"
                            + yearEdit.getText().toString();
                    billingAddress = getBillingAddress(card.BillingAddressId);

                    Intent intent = new Intent(CreateCardActivity.this,
                            CreateCustomerAddressActivity.class);
                    intent.putExtra("card", card);
                    intent.putExtra("address", billingAddress);
                    intent.putExtra("requestCode", BILLING_ADDRESS);
                    intent.putExtra("isToEdit", true);

                } else
                {

                    card.CardNumber = cardNumberEdit.getText().toString();
                    card.passWord = cardPasswordEdit.getText().toString();
                    card.ExpireDate = monthEdit.getText().toString() + "%2F"
                            + yearEdit.getText().toString();

                    Intent intent = new Intent(CreateCardActivity.this,
                            CreateCustomerAddressActivity.class);
                    intent.putExtra("requestCode", BILLING_ADDRESS);
                    intent.putExtra("card", card);
                    if (isFromCart) {
                        intent.putExtra("isFromCartPage", true);
                    }
                    startActivityForResult(intent, 0);
                    // }
                }
            }
        });
    }

    protected CustomerAddress getBillingAddress(String billingAddressId) {

        CustomerAddress addr = new CustomerAddress();

        for (CustomerAddress a : CustomerInfoActivity.billList) {
            if (billingAddressId.equals(a.AddressId))
                addr = a;
        }

        return addr;
    }

    @Override
    public void init() {
       
    }

    @Override
    public void refresh(Object... param) {
        
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == 0)
        {
            if (resultCode == 88)
            {
                Intent intent0 = new Intent(CreateCardActivity.this,
                        CustomerInfoActivity.class);
                this.setResult(99, intent0);
                finish();
            }
        }
    }

    private void showDateDialog() {

        Calendar c = Calendar.getInstance();
        int Y = c.get(Calendar.YEAR);
        int M = c.get(Calendar.MONTH);
        int D = c.get(Calendar.DAY_OF_MONTH);

        if (dateDialog == null) {
            dateDialog = new CustomerDatePickerDialog(CreateCardActivity.this,
                    new DatePickerDialog.OnDateSetListener() {

                        private String format(String mm) {
                            if (mm.length() == 1)
                            {
                                return "0" + mm;
                            } else
                                return mm;
                        }

                        @Override
                        public void onDateSet(DatePicker view, int year,
                                int monthOfYear, int dayOfMonth) {
                            int mm = monthOfYear + 1;
                            monthEdit.setText(format(mm + ""));
                            yearEdit.setText(year + "");
                        }

                    }, Y,
                    M,
                    D);

        }
        dateDialog.show();
        DatePicker dp = findDatePicker((ViewGroup) dateDialog.getWindow().getDecorView());
        int index = 1;
        if (dp != null) {
            ((ViewGroup) dp.getChildAt(0)).getChildAt(index).setVisibility(View.GONE);
        }

    }

    private DatePicker findDatePicker(ViewGroup group) {
        if (group != null) {
            for (int i = 0, j = group.getChildCount(); i < j; i++) {
                View child = group.getChildAt(i);
                if (child instanceof DatePicker) {
                    return (DatePicker) child;
                } else if (child instanceof ViewGroup) {
                    DatePicker result = findDatePicker((ViewGroup) child);
                    if (result != null)
                        return result;
                }
            }
        }
        return null;

    }
}
